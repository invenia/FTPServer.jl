name: CI
# Run on master, tags, or any pull request
on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC (8 PM CST)
  push:
    branches: [master]
    tags: ["*"]
  pull_request:
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1.0"  # LTS
          - "1"    # Latest Release
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
          - x86
        exclude:
          # Test 32-bit only on Linux
          - os: macOS-latest
            arch: x86
          - os: windows-latest
            arch: x86
        include:
          # Add a 1.5 job because that's what Invenia actually uses
          - os: ubuntu-latest
            version: 1.5
            arch: x64
          # Arm64 currently not supported by julia-actions/setup-julia
          ## Note: Conda.jl cannot be used on ARM currently which means we have to use a system Python install
          ##- os: ubuntu-latest
          ##  arch: arm64
          ##  version: 1
          ##  env:
          ##    SYS_PYTHON: ''
    steps:
      - uses: actions/checkout@v2
      - if: matrix.arch == 'x64'
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - if: matrix.os != 'windows-latest'
        run: |
          python3.8 -m pip install --upgrade pip setuptools
          python3.8 -m pip install pyopenssl pyftpdlib
      - if: matrix.os != 'windows-latest' && matrix.arch != 'x86'
        run: |
          echo "PYTHON=$pythonLocation/bin/python3.8" >> $GITHUB_ENV
      - if: matrix.os != 'windows-latest' && matrix.arch == 'x86'
        run: |
          echo "PYTHON=''" >> $GITHUB_ENV
      # Windows uses different python syntax
      - if: matrix.os == 'windows-latest'
        run: |
          py -3.8 -m pip install --upgrade pip setuptools
          py -3.8 -m pip install pyopenssl pyftpdlib
          echo "PYTHON=$env:pythonLocation\python.exe" >> $env:GITHUB_ENV
      - uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-${{ matrix.arch }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.arch }}-test-
            ${{ runner.os }}-${{ matrix.arch }}-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
        env:
          CONDA_JL_VERSION: '3'
      - uses: julia-actions/julia-runtest@latest
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info

  slack:
    name: Notify Slack Failure
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: env.WORKFLOW_CONCLUSION == 'failure'
        with:
          channel: nightly-dev
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.DEV_SLACK_BOT_TOKEN }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install pyopenssl pyftpdlib
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
            include("docs/make.jl")'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
